1:
    intro_text: "Welkom bij Hedy! In Level 1 kun je de commando's `print`, `vraag` en `echo` gebruiken.\n\nLinks in jouw scherm staan alle commando's van Level 1.\n\nDruk op de blauwe knop en de code wordt alvast voor jou getypt!\n\nProbeer de code dan zelf met de groene 'Voer de code uit' knop onder het linker programmeerveld.\n\nWeet je niet wat wil wilt maken? In de volgende tabjes staan opdrachten om te proberen.\n"
    start_code: print hallo wereld!
    commands:
    -   name: "print\n"
        explanation: "Iets printen met `print`.\n"
        example: 'Bijvoorbeeld: print Hallo welkom bij Hedy!'
        demo_code: print Hallo welkom bij Hedy!
    -   name: vraag
        explanation: "Iets vragen met `vraag`.\n"
        example: 'Bijvoorbeeld: ask Wat is je lievelingskleur?'
        demo_code: vraag Wat is je lievelingskleur?
    -   name: "echo\n"
        explanation: "Iets herhalen dat is ingetypt met `echo`.\n"
        example: 'Bijvoorbeeld: echo dus je lievelingskleur is'
        demo_code: "vraag Wat is je lievelingskleur?\necho dus je lievelingskleur is"
    -   name: vooruit
        explanation: "Een lijn trekken met `vooruit`.\n"
        example: 'Bijvoorbeeld: forward 100'
        demo_code: vooruit 100
    -   name: draai
        explanation: "De teken-schildpad draaien met `draai`\n"
        example: 'Bijvoorbeeld: turn'
        demo_code: "vooruit 25\ndraai left\nvooruit 25\ndraai right"
2:
    intro_text: "In level 2 leren we iets nieuws. Je kunt een woord een naam geven met `is`. Je kunt daarna in je code overal naam gebruiken. Dat wordt dan vervangen door Hedy. Zo:\n\n```\nnaam is Hedy\nprint hallo naam\n```\n\nDe `vraag` is in level 2 ook veranderd, het antwoord sla je ook op met een naam:\n\n```\nantwoord is vraag Hoe heet jij?\n```\n\nPrint werkt nog zoals in Level 1, en echo heb je niet meer nodig.\n"
    start_code: print hallo wereld!
    commands:
    -   name: "is\n"
        explanation: "Een woord een naam geven met `is`. Je mag de naam zelf kiezen.\n"
        example: 'Bijvoorbeeld: voornaam is Hedy.'
        demo_code: "voornaam is Hedy\nprint ik heet voornaam"
    -   name: "is - turtle\n"
        explanation: "Een getal een naam geven met `is`. Je mag de naam zelf kiezen.\n"
        example: 'Bijvoorbeeld: hoek is 90.'
        demo_code: "hoek is 90\ndraai hoek\nvooruit 100"
    -   name: vraag
        explanation: "Iets vragen met `vraag`. Maar let op! Je moet je antwoord een naam geven met `is`.\n"
        example: 'Bijvoorbeeld: kleur is ask Wat is je lievelingskleur?'
        demo_code: "kleur is vraag Wat is je lievelingskleur?\nprint Jouw favoriet is dus kleur"
3:
    intro_text: "In level 3 kan je ook een lijstje maken. Uit de lijst kun je dan iets willekeurigs kiezen. Dat doe je met `at random` (je zegt: et ren-dom).\n\n```\ndieren is hond, kat, kangoeroe\nprint dieren op willekeurig\n```\n\nJe vindt alle commando's van level 3 weer in de linkerbalk. Ook zijn er weer tabjes met opdrachten.\n"
    start_code: print hallo wereld!
    commands:
    -   name: "kies_random\n"
        explanation: "Iets willekeurigs uit een groep woorden kiezen met `op` en `willekeurig`.\n"
        example: 'Bijvoorbeeld: dieren is hond, kat, kangoeroe.'
        demo_code: "dieren is hond, kat, kangoeroe\nprint dieren op willekeurig"
4:
    start_code: print 'hallo wereld'
    intro_text: "In level 4 zijn `vraag` en `print` anders.\n\nJe moet tekst die je letterlijk wilt printen tussen aanhalingstekens zetten.\n\nDat is handig, want nu kan je alle woorden printen die je maar wilt. Ook de woorden die je hebt gebruikt om iets in op te slaan met `is`.\n\nDe meeste programmeertalen gebruiken ook aanhalingstekens bij het printen, dus we komen zo al een stapje dichterbij echt programmeren!\n\n## Opdrachten worden steeds moeilijker\nJe vindt de commando's weer links, en opdrachten in de volgende tabjes. De opdrachten worden in de opeenvolgende tabjes nu steeds iets moeilijker.\nBegin dus links met het verhaal, en werk zo door om steeds meer uitgedaagd te worden.\n"
    commands:
    -   name: "print\n"
        explanation: "Iets letterlijk printen met `print`.\n"
        example: "Bijvoorbeeld: print 'Hallo welkom bij Hedy.'"
        demo_code: print 'Hallo welkom bij Hedy'
    -   name: "is\n"
        explanation: "Een stukje tekst een naam geven met `is` en printen zonder aanhalingstekens\n"
        example: 'Bijvoorbeeld: naam is Hedy.'
        demo_code: "naam is Hedy\nprint 'ik heet ' naam"
    -   name: vraag
        explanation: "Iets vragen met `vraag`\n"
        example: "Bijvoorbeeld: kleur is ask 'Wat is je lievelingskleur?'"
        demo_code: "kleur is vraag 'Wat is je lievelingskleur?'\nprint 'Jouw favoriet is dus ' kleur"
5:
    start_code: "naam is vraag 'hoe heet jij?'\nals naam is Hedy print 'leuk' anders print 'minder leuk!'"
    intro_text: "`vraag` en `print` werken nog zoals in level 4.\n\nIn level 5 is er iets nieuws, de `als`! If is Engels voor als. Met de `als` kun je een keuze maken tussen twee verschillende opties.\n\n## Voorbeeld Hedy Code\n```\nnaam is vraag 'hoe heet jij?'\nals naam is Hedy print 'leuk' anders print 'minder leuk!'\n```\n\nDeze code print leuk als je Hedy als naam invoert, en minder leuk als je iets anders invoert.\n\nJe mag `als` ook combineren met `in`, om te kijken of iets in een lijst zit.\n\n## Voorbeeld Hedy Code\n```\nmooiedummykleuren is geel, rood\nkleur is vraag 'Wat is jouw lievelingskleur?'\nals kleur in mooiedummykleuren print 'mooi' anders print 'meh!'\n```\n\nDeze code print mooi als je geel of rood antwoordt, en anders meh!\n\n## Tip\nSoms wordt code met een `als` erg lang en past het niet meer goed in het tekstvlak. Je mag dan een enter gebruiken en de code over twee regels verdelen. Begin dan de tweede regel met een `anders`:\n```\nnaam is vraag 'hoe heet jij?'\n\
        als naam is Hedy print 'leuk' anders print 'minder leuk!'\n```\n\n## Opdrachten worden steeds moeilijker\n\nOok in level 5 worden de opdrachten in de tabjes steeds iets moeilijker. Doe ze dus van links naar rechts.\n"
    commands:
    -   name: als
        explanation: "Een keuze maken met `als`\n"
        example: "Bijvoorbeeld: if kleur is groen print 'mooi!' else print 'niet zo mooi'"
        demo_code: "kleur is vraag 'Wat is je lievelingskleur?'\nals kleur is groen print 'mooi!' anders print 'niet zo mooi'"
    -   name: "if met turtle\n"
        explanation: "Een keuze maken met `als`\n"
        example: 'Bijvoorbeeld: if antwoord is ver forward 100 else forward 5'
        demo_code: "antwoord is vraag 'Hoe ver moet ik lopen?'\nals antwoord is ver vooruit 100 anders vooruit 5"
6:
    start_code: print '5 keer 5 is ' 5 * 5
    intro_text: "`vraag`, `print` en `als` werken nog zoals in level 5.\nMaar in Level 6 is er iets nieuws, je kunt nu ook rekenen.\n\nDe plus is makkelijk, die schrijf je zoals bij rekenen: `5 + 5` bijvoorbeeld. De min gaat ook goed, dat is `5 - 5`.\n\nDe keer is een beetje anders, want er zit namelijk geen keer op je toetsenbord. Zoek maar eens, die is er echt niet!\nDaarom doen we de keer met het sterretje boven de 8: `5 * 5`. Lees dat maar als \"5 keer 5\", dan onthoud je het het makkeljkst.\n## Voorbeeld Hedy code\n```\nprint '5 plus 5 is ' 5 + 5\nprint '5 min 5 is ' 5 - 5\nprint '5 keer 5 is ' 5 * 5\n```\n"
    commands:
    -   name: "print\n"
        explanation: "Iets letterlijk printen met `print`.\n"
        example: "Bijvoorbeeld: print '5 keer 5 is ' 5 * 5"
        demo_code: print '5 keer 5 is ' 5 * 5
    -   name: "`vraag` en `als` samen met rekenen\n"
        explanation: "Het antwoord van een som vragen met `vraag` en kijken of het goed is.\n"
        example: "Bijvoorbeeld: antwoord is ask 'Hoeveel is 10 plus 10?'"
        demo_code: "antwoord is vraag 'Hoeveel is 10 plus 10?'\nals antwoord is 20 print 'Goedzo!' anders print 'Foutje'"
    -   name: "`vraag` en `als` turtle\n"
        explanation: "De gebruiker vragen hoeveel hoeken hij wil\n"
        example: "Bijvoorbeeld: hoeken is ask 'hoeveel hoeken krijgt dit figuur?'"
        demo_code: "hoeken is vraag 'Hoeveel hoeken krijgt dit figuur?'\nhoek is 360 / hoeken\nvooruit 50"
7:
    start_code: herhaal 3 keer print 'Hedy is leuk!'
    intro_text: "`vraag`, `print` en `als` werken nog zoals in level 5 en 6.\nMaar in Level 7 is er iets nieuws: de `herhaal`.\nMet `herhaal` kun je codes een aantal keer herhalen.\n\n## Voorbeeld Hedy code\n```\nherhaal 3 keer print 'Hedy is leuk!'\n```\n"
    commands:
    -   name: herhaal
        explanation: "Iets herhalen met `herhaal`.\n"
        example: "Bijvoorbeeld: repeat 3 times print 'Hedy is leuk!'"
        demo_code: herhaal 3 keer print 'Hedy is leuk!'
    -   name: "repeat - turtle\n"
        explanation: "Een regel code herhalen met `herhaal`.\n"
        example: 'Bijvoorbeeld: repeat 3 times forward 10'
        demo_code: herhaal 3 keer vooruit 10
8:
    start_code: "herhaal 5 keer\n    print 'Hallo allemaal'\n    print 'Dit wordt allemaal 5 keer herhaald'"
    intro_text: "`vraag` en `print` werken nog zoals eerst, maar `als` en `herhaal` zijn nu veranderd!\nJe kunt nu meerdere regels samen herhalen. Dan moet je de regels die herhaald worden wel *inspringen*,\ndat betekent dat ze moeten beginnen met vier spaties.\nOok als je maar één regel wilt herhalen moet je inspringen!\n## Voorbeeld Hedy code\n```\nherhaal 5 keer\n    print 'Hallo allemaal'\n    print 'Dit wordt allemaal 5 keer herhaald'\n```\n"
    commands:
    -   name: "`als` met meerdere regels\n"
        explanation: "Het antwoord van een som vragen met `vraag` en kijken of het goed is. Nu printen we twee regels uit.\n"
        example: "Bijvoorbeeld: antwoord is ask 'Hoeveel is 10 plus 10?'"
        demo_code: "antwoord is vraag 'Hoeveel is 10 plus 10?'\nals antwoord is 20\n    print 'Goedzo!'\n    print 'Het antwoord was inderdaad ' antwoord\nanders\n    print 'Foutje'\n    print 'Het antwoord moest zijn 20'"
    -   name: "`herhaal` met de turtle\n"
        explanation: "Meerdere regels samen herhalen\n"
        example: 'Bijvoorbeeld: een vierkant maken'
        demo_code: "herhaal 4 keer\n    draai 90\n    vooruit 50"
9:
    start_code: "herhaal 3 keer\n    eten is vraag 'Wat wil je bestellen?'\n    als eten is pizza\n        print 'lekker'\n    anders\n        print 'pizza is lekkerder'"
    intro_text: "In dit level kun je niet alleen meerdere regels gebruiken bij `als` en `herhaal`, maar je kunt ze ook nog eens in elkaar zetten!\nIn het voorbeeldje zie je een if commando in een repeat commando staan. Andersom mag het ook en een if mag ook in een if en een repeat in een repeat.\nProbeer het maar eens!\n\n## Voorbeeld Hedy code\n```\nherhaal 3 keer\n    eten is vraag 'Wat wil je bestellen?'\n    als eten is pizza\n        print 'lekker'\n    anders\n        print 'pizza is lekkerder'\n```\n"
    commands:
    -   name: "`als` met meerdere regels\n"
        explanation: "Het antwoord van een som vragen met `vraag` en kijken of het goed is. Nu printen we twee regels uit.\n"
        example: "Bijvoorbeeld: antwoord is ask 'Hoeveel is 10 plus 10?'"
        demo_code: "antwoord is vraag 'Hoeveel is 10 plus 10?'\nals antwoord is 20\n    print 'Goedzo!'\n    print 'Het antwoord was inderdaad ' antwoord\nanders\n    print 'Foutje'\n    print 'Het antwoord moest zijn 20'"
    -   name: "`herhaal` met de turtle\n"
        explanation: "Meerdere regels samen herhalen\n"
        example: 'Bijvoorbeeld: een vierkant maken'
        demo_code: "herhaal 4 keer\n    draai 90\n    vooruit 50"
10:
    start_code: "dieren is hond, kat, papegaai\nvoor dier in dieren\n    print dier ' is een leuk dier!'"
    intro_text: "In dit level leren we een nieuwe code, de code `voor`. Met `voor` kun je alle dingen in een lijstje gebruiken.\n`voor` mag meerdere regels gebruiken, net zoals de `herhaal` and `als`, dus alle regels eronder moeten met spaties beginnen.\n\n## Voorbeeld Hedy code\n```\ndieren is hond, kat, papegaai\nvoor dier in dieren\n    print dier ' is een leuk dier!'\n```\n"
    commands:
    -   name: "for met een lijst\n"
        explanation: "Alle dingen in een lijstje printen\n"
        example: 'Bijvoorbeeld: for dier in dieren'
        demo_code: "dieren is hond, kat, papegaai\nvoor dier in dieren\n    print dier"
11:
    start_code: "voor i in bereik 1 tot 10\n    print i\nprint 'Wie niet weg is is gezien'"
    intro_text: "We gaan nu een extra vorm van de `voor` toevoegen! Je mag ook `for i in range 1 to 5` typen in plaats van `repeat 5 times`. Het leuke is dat je die variabele `i` ook in je programma kan gebruiken! Je moet nog steeds alle regels die herhaald worden inspringen (dat betekent dat ze moeten beginnen met vier spaties)\n"
    commands:
    -   name: "for met i\n"
        explanation: "`voor` met getallen\n"
        example: for i in range 1 to 10
        demo_code: "voor i in bereik 1 tot 10\n    print i\nprint 'Wie niet weg is is gezien'"
12:
    start_code: "print 'kommagetallen gaan met een punt!'\nprint 2.5 + 2.5"
    intro_text: "Tot nu toe mocht je nog geen kommagetallen gebruiken zoals bijv anderhalf, maar nu wel!\nLet wel heel goed op... kommagetallen gaan op de computer met een punt en niet met een komma.\n\n## Voorbeeld Hedy code\n```\nprint 'Kommagetallen gaan met een punt!'\nprint 2.5 + 2.5\n```\n\n## Tekst moet altijd met aanhalingstekens\nNu we verder zijn met programmeren moet je ook weten dat tekst altijd tussen aanhalingstekens hoort. Ook in de `is`.\n\n```\nnaam is 'Hedy'\nprint 'Hallo ' naam\n```\n\nMaar, zoals je ziet gaan variabelen, zoals naam, wel zonder aanhalingstekens. We bedoelen immers niet het woordje 'naam'.\n\nAlleen bij getallen gebruik je geen aanhalingstekens in de `is`:\n```\nscore is 25\nprint 'Jij hebt ' score ' gehaald!'\n```\n"
    commands:
    -   name: "assign text\n"
        explanation: "Opslaan van tekst met is\n"
        example: naam is 'Hedy'
        demo_code: "naam is 'Hedy'\nprint 'Hallo ' naam"
    -   name: "float directly\n"
        explanation: "Een som met kommagetallen\n"
        example: print 2.5 + 2.5
        demo_code: "print 'Rekenen maar!'\nprint 'Tweeenhalf plus tweeenhalf is...'\nprint 2.5 + 2.5"
    -   name: "float in var\n"
        explanation: "Een som met kommagetallen opslaan\n"
        example: antwoord is 2.5 + 2.5
        demo_code: "antwoord is 2.5 + 2.5\nprint 'Rekenen maar!'\nprint 'Tweeenhalf plus tweeenhalf is...'\nprint antwoord"
13:
    start_code: "naam is vraag 'hoe heet jij?'\nleeftijd is vraag 'hoe oud ben jij?'\nals naam is 'Hedy' en leeftijd is 2\n    print 'Jij bent de echte Hedy!'"
    intro_text: "We gaan nu `en` en `of` gebruiken! Als je twee dingen wilt checken hoef je niet meer twee ifjes in elkaar te doen maar kan je nu `en` gebruiken. Beide dingen in de `als` moeten waar zijn als je een `en` gebruikt. We kunnen ook `of` gebruiken. Daarbij moet er één van de twee waar zijn.\n"
    commands:
    -   name: "And\n"
        explanation: "`En` is dus en. Beide dingen links en rechts van de `en` moeten waar zijn.\n"
        example: if 3+2 is 5 and 2+2 is 4
        demo_code: "antwoord1 is vraag 'hoeveel is 3+2?'\nantwoord2 is vraag 'hoeveel is 2+2?'\nals antwoord1 is 5 en antwoord2 is 4\n    print 'beide antwoorden zijn goed!'\nanders\n    print 'Minimaal 1 antwoord is fout!'"
    -   name: "Or\n"
        explanation: "`Of` is dus of. Minimaal 1 van de 2 tussen de `of` moet goed zijn. Allebei goed mag ook.\n"
        example: if 3+2 is 5 or 2+2 is 4
        demo_code: "antwoord1 is vraag 'hoeveel is 3+2?'\nantwoord2 is vraag 'hoeveel is 2+2?'\nals antwoord1 is 5 of antwoord2 is 4\n    print 'Je hebt minimaal 1 antwoord goed!'\nanders\n    print 'Beide antwoorden zijn fout!'"
14:
    start_code: "leeftijd is vraag 'Hoe oud ben jij?'\nals leeftijd < 13\n    print 'Dan ben je jonger dan ik!'\nanders\n    print 'Dan ben je ouder dan ik!'"
    intro_text: "We gaan nieuwe tekens leren, je kent ze misschien wel van rekenen/wiskunde, `<` en `>`. De `<` kijkt of het eerste getal kleiner is dan de tweede zoals `4 < 5`. De `>` kijkt of iets groter is dan het tweede getal zoals `6 > 5`.\n"
    commands:
    -   name: "Kleiner\n"
        explanation: "De `<` kijkt dus of het eerste getal kleiner is dan het tweede getal. Als je wilt kijken of een variabele kleiner is dan 15 gebruik je `variabele < 15`\n"
        example: 'Bijvoorbeeld: leeftijd < 13'
        demo_code: "leeftijd is vraag 'Hoe oud ben jij?'\nals leeftijd < 13\n    print 'Dan ben je jonger dan ik!'"
    -   name: "Groter\n"
        explanation: "De `>` kijkt dus of het eerste getal groter is dan het tweede getal. Als je wilt kijken of een variabele groter is dan 15 gebruik je `variabele > 15`\n"
        example: 'Bijvoorbeeld: leeftijd > 13'
        demo_code: "leeftijd is vraag 'Hoe oud ben jij?'\nals leeftijd > 13\n    print 'Dan ben je ouder dan ik!'"
15:
    start_code: "antwoord is 0\nzolang antwoord != 25\n    antwoord is vraag 'Wat is 5 keer 5?'\nprint 'Goed gedaan!'"
    intro_text: "Nu gaan we een nieuwe loop leren: De `zolang` loop! We gaan door zo lang het statement dat we hebben waar is! Dus bij de voorbeeldcode gaan we door totdat er een goed antwoord is gegeven. Als er nooit een goed antwoord wordt gegeven, dan stopt de loop nooit!\n"
    commands:
    -   name: "While\n"
        explanation: "We kunnen dus een `zolang` loop gebruiken\n"
        example: 'Bijvoorbeeld: while antwoord is != 25'
        demo_code: "antwoord is 0\nzolang antwoord != 25\n    antwoord is vraag 'Wat is 5 keer 5?'\nprint 'Goed gedaan!'"
    -   name: "Smaller while\n"
        explanation: "We kunnen een `zolang` loop ook gebruiken met `<` en `>`. Let wel op dat je het getal ooit groter maakt. Anders ga je de loop nooit uit\n"
        example: 'Bijvoorbeeld: while tel < 3'
        demo_code: "tel is 1\nzolang tel < 3\n    print 'Dit is de ' tel 'e keer'\n    tel is tel + 1\nprint 'We zijn klaar'"
16:
    start_code: "fruit is ['appel', 'banaan', 'kers']\nprint fruit"
    intro_text: "We zijn aangekomen bij de laatste paar Hedy levels. We komen dus steeds dichter bij echte Pythoncodes.\nIn dit level gaan we leren hoe je lijsten maakt op de Pythonmanier. dat werkt met vierkante haakjes zetten om lijstjes, dat zijn deze: [ en ].\nAls we woorden in de lijst willen zetten, moeten we om de woorden ook enkele aanhalingstekens zetten. Bij getallen hoeft dat niet.\nWe kunnen in dit level ook met een getal plekken in lijstjes aanwijzen.\n\n#Voorbeeld Hedy code\n```\nvrienden is ['Ahmed', 'Ben', 'Cayden']\ngeluksgetallen is [15, 18, 6]\nvoor i in bereik 1 tot 3\n    print 'het geluksgetal van ' vrienden[i]\n    print 'is ' geluksgetallen[i]\n```\n"
    commands:
    -   name: "Haakjes om lijstjes\n"
        explanation: "We gaan nu haakjes om lijstjes heen zetten! Let ook op de enkele aanhalingstekens om items in het lijstje!\n"
        example: "Bijvoorbeeld: fruit is ['appel', 'banaan', 'kers']"
        demo_code: "fruit is ['appel', 'banaan', 'kers']\nprint fruit"
    -   name: "Pak iets uit een lijst\n"
        explanation: "Om een item uit een lijst te krijgen gebruiken we [nummer] dus met fruit[1] krijg je de eerste fruit uit de lijst !\n"
        example: 'Bijvoorbeeld: eerstefruit is fruit[1]'
        demo_code: "fruit is ['banaan', 'appel', 'kers']\neerstefruit is fruit[1]\nprint eerstefruit"
    -   name: "Pak een random item uit een lijst\n"
        explanation: "Om een random item uit een lijst te pakken, gebruiken we [random]. Dus fruit[random] is pak een random fruit uit de lijst!\n"
        example: 'Bijvoorbeeld: randomfruit is fruit[random]'
        demo_code: "fruit is ['banaan', 'appel', 'kers']\nrandomfruit is fruit[willekeurig]\nprint randomfruit"
17:
    start_code: "for i in range 1 to 10:\n    print i\nprint 'Wie niet weg is is gezien'"
    intro_text: 'Nu veranderen we nog een klein stukje dat te maken heeft met het inspringen. Elke keer dat we gaan inspringen moeten we een : bij de regel ervoor zetten.'
    commands:
    -   name: 'for met :'
        explanation: Bij `for` moet je dus een `:` er achter zetten!
        example: 'for i in range 1 to 10:'
        demo_code: "for i in range 1 to 10:\n    print i\nprint 'wie niet weg is is gezien'"
    -   name: 'if met :'
        explanation: We moeten hetzelfde doen met al onze `if` statements
        example: 'if kleur is groen:'
        demo_code: "kleur is ask 'Wat vind jij de mooiste kleur?'\nif kleur is groen:\n    print 'Jouw kleur is groen'\nelse:\n    print 'Jouw kleur is zeker niet groen'"
    -   name: elif
        explanation: 'Verder is er een nieuw commando dat je mag gebruiken: `elif`. `elif` is eigenlijk else if. Je kijkt dus eerst naar `if` en als die niet waar is dan probeer je `elif` en als die niet waar is dan ga je naar de `else`.'
        example: 'elif a is 5:'
        demo_code: "a is 2\nif a is 1:\n    print 'a is 1'\nelif a is 2:\n    print 'a is 2'\nelse:\n    print 'a is niet 1 of 2'"
18:
    start_code: "naam is 'Hedy'\nprint('ik heet', naam)"
    intro_text: "We zijn aangekomen bij echte Pythoncode! Dat betekent wel dat we vanaf nu ronde haakjes moeten gebruiken bij print en bij range.\nZo gaat dat:\n\n```\nprint('ik heet Hedy!')\n```\n\nWil je meerdere dingen printen? Dan moeten daar steeds komma's tussen.\n\n```\nnaam is 'Hedy'\nprint('ik heet', naam)\n```"
    commands:
    -   name: print
        explanation: Bij `print` moet je haakjes gebruiken
        example: print
        demo_code: print('hallo!')
    -   name: print met var
        explanation: Bij `print` moet je haakjes gebruiken en komma's als je meerdere dingen print
        example: print
        demo_code: "naam is 'Hedy'\nprint('ik heet', naam)"
