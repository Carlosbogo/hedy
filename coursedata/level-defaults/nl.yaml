1:
    intro_text: |
        Welkom bij Hedy! In Level 1 kun je de commando's `print`, `ask` en `echo` gebruiken.

        Links in jouw scherm staan alle commando's van Level 1.

        Druk op de blauwe knop en de code wordt alvast voor jou getypt!

        Probeer de code dan zelf met de groene 'Voer de code uit' knop onder het links programmeerveld.

        Weet je niet wat wil wilt maken? In de volgende tabjes staan opdrachten om te proberen.

    start_code: "print hallo wereld!"
    commands:
    -   name: "print"
        explanation: "Iets printen met `print`."
        example: "Bijvoorbeeld: print Hallo welkom bij Hedy!"
        demo_code: "print Hallo welkom bij Hedy!"
    -   name: "ask"
        explanation: "Iets vragen met `ask`."
        example: "Bijvoorbeeld: ask Wat is je lievelingskleur?"
        demo_code: "ask Wat is je lievelingskleur?"
    -   name: "echo"
        explanation: "Iets herhalen dat is ingetypt met `echo`."
        example: "Bijvoorbeeld: echo dus je lievelingskleur is..."
        demo_code: |-
            ask Wat is je lievelingskleur?
            echo dus je lievelingskleur is...
2:
    intro_text: |
        In level 2 leren we iets nieuws. Je kunt een woord een naam geven met `is`.

        Als je de code `naam is Hedy` bovenaan je programma zet, kun je daarna overal naam gebruiken. Dat wordt dan vervangen door Hedy.

        De `ask` is in level 2 veranderd, het antwoord sla je ook op met een naam:

        ```
        antwoord is Hoe heet jij?
        ```

        Print werkt nog zoals in Level 1, en echo heb je niet meer nodig.

        In level 2 kan je ook een lijstje maken. Uit de lijst kun je dan iets willekeurigs kiezen. Dat doe je met `at random` (je zegt: et ren-dom).

        Je vindt alle codes van level 2 weer in de linkerbalk. Ook zijn er weer tabjes met opdrachten.
    start_code: "print hallo wereld!"
    commands:
    -   name: "is"
        explanation: "Een woord een naam geven met `is`. Je mag de naam zelf kiezen."
        example: "Bijvoorbeeld: voornaam is Hedy."
        demo_code: |-
            voornaam is Hedy
            print ik heet voornaam
    -   name: "ask"
        explanation: "Iets vragen met `ask`. Maar let op! Je moet je antwoord een naam geven met `is`."
        example: "Bijvoorbeeld: kleur is ask Wat is je lievelingskleur?"
        demo_code: |-
            kleur is ask Wat is je lievelingskleur?
            print Jouw favoriet is dus kleur
    -   name: "kies_random"
        explanation: "Iets willekeurigs uit een groep woorden kiezen met `at` en `random`."
        example: "Bijvoorbeeld: dieren is hond, kat, kangoeroe."
        demo_code: |-
            dieren is hond, kat, kangoeroe
            print dieren at random
3:
    start_code: "print 'hallo wereld'"
    intro_text: |
        `ask` is nog steeds hetzelfde in level 3, maar `print` is nu anders.

        Je moet tekst die je letterlijk wilt printen tussen aanhalingstekens zetten.

        Dat is handig, want nu kan je alle woorden printen die je maar wilt. Ook de woorden die je hebt gebruikt om iets in op te slaan met `is`.

        De meeste programmeertalen gebruiken ook aanhalingstekens bij het printen, dus we komen zo al een stapje dichterbij echt programmeren!

        ## Opdrachten worden steeds moeilijker
        Je vindt de commando's weer links, en opdrachten in de volgende tabjes. De opdrachten worden in de opeenvolgende tabjes nu steeds iets moeilijker.
        Begin dus links met het verhaal, en werk zo door om steeds meer uitgedaagd te worden.

    commands:
    -   name: "print"
        explanation: "Iets letterlijk printen met `print`."
        example: "Bijvoorbeeld: print 'Hallo welkom bij Hedy.'"
        demo_code: "print 'Hallo welkom bij Hedy'"
    -   name: "is"
        explanation: "Een stukje tekst een naam geven met `is` en printen zonder aanhalingstekens"
        example: "Bijvoorbeeld: naam is Hedy."
        demo_code: |-
            naam is Hedy
            print 'ik heet ' naam
    -   name: "ask"
        explanation: "Iets vragen met `ask`"
        example: "Bijvoorbeeld: kleur is ask Wat is je lievelingskleur?"
        demo_code: |-
            kleur is ask Wat is je lievelingskleur?
            print 'Jouw favoriet is dus ' kleur
4:
    start_code: |-
        naam is ask hoe heet jij?
        if naam is Hedy print 'leuk' else print 'minder leuk!'
    intro_text: |
        `ask` en `print` werken nog zoals in level 3.

        In level 4 is er iets nieuws, de `if`! If is Engels voor als. Met de `if` kun je een keuze maken tussen twee verschillende opties.

        ## Voorbeeld Hedy Code
        ```
        naam is ask hoe heet jij?
        if naam is Hedy print 'leuk' else print 'minder leuk!'
        ```

        Deze code print leuk als je Hedy als naam invoert, en minder leuk als je iets anders invoert.

        ## Opdrachten worden steeds moeilijker

        Ook in level 4 worden de opdrachten in de tabjes steeds iets moeilijker. Doe ze dus van links naar rechts.
    commands:
    -   name: "print"
        explanation: "Iets letterlijk printen met `print`."
        example: "Bijvoorbeeld: print 'Hallo welkom bij Hedy.'"
        demo_code: "print 'Hallo welkom bij Hedy'"
    -   name: "ask"
        explanation: "Iets vragen met `ask`."
        example: "Bijvoorbeeld: kleur is ask Wat is je lievelingskleur?"
        demo_code: |-
            kleur is ask Wat is je lievelingskleur?
            print 'Jouw favoriet is dus ' kleur
    -   name: "if"
        explanation: "Een keuze maken met `if`"
        example: "Bijvoorbeeld: if kleur is groen print 'mooi!' else print 'niet zo mooi'"
        demo_code: |-
            kleur is ask Wat is je lievelingskleur?
            if kleur is groen print 'mooi!' else print 'niet zo mooi'
5:
    start_code: "repeat 3 times print 'Hedy is leuk!'"
    intro_text: |
        `ask`, `print` en `if` werken nog zoals in level 4.
        Maar in Level 5 is er iets nieuws: de `repeat`.
        Met `repeat` kun je codes een aantal keer herhalen.

        ## Voorbeeld Hedy code
        ```
        repeat 3 times print 'Hedy is leuk!'
        ```
    commands:
    -   name: "print"
        explanation: "Iets letterlijk printen met `print`."
        example: "Bijvoorbeeld: print 'Hallo welkom bij Hedy.'"
        demo_code: "print 'Hallo welkom bij Hedy'"
    -   name: "ask"
        explanation: "Iets vragen met `ask`."
        example: "Bijvoorbeeld: kleur is ask Wat is je lievelingskleur?"
        demo_code: |-
            kleur is ask Wat is je lievelingskleur?
            print 'Jouw favoriet is dus ' kleur
    -   name: "if"
        explanation: "Een keuze maken met `if`"
        example: "Bijvoorbeeld: if kleur is groen print 'mooi!' else print 'niet zo mooi'"
        demo_code: |-
            kleur is ask Wat is je lievelingskleur?
            if kleur is groen print 'mooi!' else print 'niet zo mooi'
    -   name: "repeat"
        explanation: "Herhalen en `if` samen"
        example: "Bijvoorbeeld: if kleur is groen repeat 3 times print 'mooi!' else repeat 5 times print 'niet zo mooi'"
        demo_code: |-
            kleur is ask Wat is je lievelingskleur?
            if kleur is groen repeat 3 times print 'mooi!' else repeat 5 times print 'niet zo mooi'
6:
    start_code: "print '5 keer 5 is ' 5 * 5"
    intro_text: |
        `ask`, `print`, `if` en `repeat` werken nog zoals in level 4 en 5.
        Maar in Level 6 is er iets nieuws, je kunt nu ook rekenen.

        In level 6 komen er weer een nieuwe codes bij, je kunt nu namelijk gaan rekenen in je code.

        De plus is makkelijk, die schrijf je zoals bij rekenen: `5 + 5` bijvoorbeeld. De min gaat ook goed, dat is `5 - 5`.

        De keer is een beetje anders, want er zit namelijk geen keer op je toetsenbord. Zoek maar eens, die is er echt niet!
        Daarom doen we de keer met het sterretje boven de 8: `5 * 5`. Lees dat maar als 5 keer 5 dan onthoud je het het makkeljkst.
        ## Voorbeeld Hedy code
        ```
        print '5 plus 5 is ' 5 + 5
        print '5 min 5 is ' 5 - 5
        print '5 keer 5 is ' 5 * 5
        ```
    commands:
    -   name: "print"
        explanation: "Iets letterlijk printen met `print`."
        example: "Bijvoorbeeld: print '5 keer 5 is ' 5 * 5"
        demo_code: "print '5 keer 5 is ' 5 * 5"
    -   name: "`ask` en `if` samen met rekenen"
        explanation: "Het antwoord van een som vragen met `ask` en kijken of het goed is."
        example: "Bijvoorbeeld: antwoord is ask Hoeveel is 10 plus 10?"
        demo_code: |-
            antwoord is ask Hoeveel is 10 plus 10?
            if antwoord is 20 print 'Goedzo!' else print 'Foutje'
    -   name: "repeat"
        explanation: "Herhalen en `if` samen"
        example: "Bijvoorbeeld: if antwoord is 50 repeat 3 times print 'goedzo!' else repeat 5 times print 'niet goed!'"
        demo_code: |-
            antwoord is ask Hoeveel is 5 keer 10
            if antwoord is 50 repeat 3 times print 'goedzo!' else repeat 5 times print 'niet goed!'
7:
    start_code: |-
        repeat 5 times
          print 'Hallo allemaal'
          print 'Dit wordt allemaal 5 keer herhaald'
    intro_text: |
        `ask` en `print` werken nog zoals eerst, maar `if` en `repeat` zijn nu veranderd!
        Je kunt nu meerdere regels samen herhalen. Dan moet je de regels die herhaald worden wel inspringen,
        dat betekent dat ze moeten beginnen met vier spaties.
        Ook als je maar één regel wilt herhalen moet je inspringen!
        ## Voorbeeld Hedy code
        ```
        repeat 5 times
            print 'Hallo allemaal'
            print 'Dit wordt allemaal 5 keer herhaald'
        ```
        Als je een `repeat` en een `if` samen gebruikt moet je steeds opnieuw inspringen.

        ## Voorbeeld Hedy code
        ```
        kleur is ask Wat is je lievelingskleur?
        if kleur is groen
            repeat 3 times
                print 'mooi!'
        else
            repeat 5 times
                print 'niet zo mooi'
        ```
    commands:
    -   name: "print"
        explanation: "Iets letterlijk printen met `print`."
        example: "Bijvoorbeeld: print '5 keer 5 is ' 5 * 5"
        demo_code: "print '5 keer 5 is ' 5 * 5"
    -   name: "`if` met meerdere regels"
        explanation: "Het antwoord van een som vragen met `ask` en kijken of het goed is. Nu printen we twee regels uit."
        example: "Bijvoorbeeld: antwoord is ask Hoeveel is 10 plus 10?"
        demo_code: |-
            antwoord is ask Hoeveel is 10 plus 10?
            if antwoord is 20
                print 'Goedzo!'
                print 'Het antwoord was inderdaad ' antwoord
            else
                print 'Foutje'
                print 'Het antwoord moest zijn 20'
    -   name: "`if` en `repeat` samen"
        explanation: "`repeat` en `if` samen"
        example: "Bijvoorbeeld: if kleur is groen repeat 3 times print 'mooi!' else repeat 5 times print 'niet zo mooi'"
        demo_code: |-
            kleur is ask Wat is je lievelingskleur?
            if kleur is groen
                repeat 3 times
                    print 'mooi!'
            else
                repeat 5 times
                    print 'niet zo mooi'


8:
    start_code: |-
        for i in range 1 to 10
            print i
        print 'Wie niet weg is is gezien'
    intro_text: "We gaan nu `repeat` veranderen in `for`! Je typt nu for `i in range 1 to 5`, in plaats van `repeat 5 times`. Het leuke is dat je die variabele `i` ook in je programma kan gebruiken! Je moet nog steeds alle regels die herhaald worden inspringen (dat betekent dat ze moeten beginnen met vier spaties)"
    commands:
    -   name: "repeat vervangen met for"
        explanation: "`repeat` vervangen"
        example: "for i in range 1 to 10"
        demo_code: |
            for i in range 1 to 10
              print i
            print 'Wie niet weg is is gezien'
9:
    start_code: |-
        for i in range 1 to 10:
            print i
        print 'Wie niet weg is is gezien'
    intro_text: "Nu veranderen we nog een klein stukje dat te maken heeft met het inspringen. Elke keer dat we gaan inspringen moeten we een : bij de regel er voor zetten."
    commands:
    -   name: "for met :"
        explanation: "Bij `for` moet je dus een `:` er achter zetten!"
        example: "for i in range 1 to 10:"
        demo_code: |-
            for i in range 1 to 10:
                print i
            print 'wie niet weg is is gezien'
    -   name: "if met :"
        explanation: "We moeten hetzelfde doen met al onze `if` statements"
        example: "if kleur is groen:"
        demo_code: |-
            kleur is groen
            if kleur is groen:
                print 'De kleur is groen'
            else:
                print 'De kleur is niet groen'
    -   name: "(Optioneel) elif"
        explanation: "Verder is er een nieuw commando die je mag gebruiken: `elif`. `elif` is eigenlijk else if. Je kijkt dus eerst naar `if` en als die niet waar is dan probeer je `elif` en als die niet waar is dan ga je naar de `else`."
        example: "elif a is 5:"
        demo_code: |-
            a is 2
            if a is 1:
                print 'a is 1'
            elif a is 2:
                print 'a is 2'
            else:
                print 'a is niet 1 of 2'
10:
    start_code: |-
        for i in range 1 to 3:
            for j in range 1 to 5:
            print 'we zitten nu in rondje: ' i ' en de tel is: ' j
    intro_text: "Vanaf nu mogen we ook een loopje vaker uitvoeren. In het voorbeeld tellen we 3 maal tot 5. Dus we doen 3 rondjes en tellen elke keer tot 5"
    commands:
    -   name: "for onder elkaar"
        explanation: "Dit is een voorbeeld van for loopjes onder/in elkaar zetten"
        demo_code: |-
            for i in range 1 to 3:
                for j in range 1 to 5:
                print 'we zitten nu in rondje: ' i ' en de tel is: ' j
    -   name: "if onder elkaar"
        explanation: "We kunnen hetzelfde doen met if statements"
        demo_code: |-
            kleur is blauw
            kleurtwee is geel
            if kleur is blauw:
                if kleurtwee is geel:
                    print 'Samen is dit groen!'
11:
    start_code: |-
        leeftijd is input('Hoe oud ben jij?')
        print('Dus jij hebt zo veel verjaardagen gehad:')
        for i in range(0,leeftijd):
            print(i)
    intro_text: "We gaan nu ronde haakjes toevoegen en ask veranderen! Ask noemen we nu input! Bij print, ask en for gaan we nu haakjes zetten!"
    commands:
    -   name: "Print"
        explanation: "We gaan nu haakjes om print heen zetten!"
        example: "Bijvoorbeeld: print('Hallo Wereld')"
        demo_code: "print('Hallo Wereld')"
    -   name: "Ask naar input!"
        explanation: "We zetten ask om en noemen het nu input, ook zetten we haakjes er omheen"
        example: "Bijvoorbeeld: antwoord is input('Hoe heet jij?')"
        demo_code: |-
            antwoord is input('Hoe heet jij?')
            print('Dus jij heet ' antwoord)
    -   name: "For met haakjes"
        explanation: "We gaan nu in plaats van for i in range 1 to 10, haakjes zetten om de getallen. for i in range(0,10):"
        example: "Bijvoorbeeld: for i in range(0,10):"
        demo_code: |-
            for i in range(0,10):
                print(i)
            print('Wie niet weg is is gezien')
12:
    start_code: |-
        fruit is ['appel', 'banaan', 'kers']
        print(fruit)
    intro_text: "Nu gaan we vierkante haakjes zetten om lijstjes! We moeten nu ook enkele aanhalingstekens (') om items in lijstjes zetten!"
    commands:
    -   name: "Haakjes om lijstjes"
        explanation: "We gaan nu haakjes om lijstjes heen zetten! Let ook op de enkele aanhalingstekens om items in het lijstje!"
        example: "Bijvoorbeeld: fruit is ['appel', 'banaan', 'kers']"
        demo_code: |-
            fruit is ['appel', 'banaan', 'kers']
            print(fruit)
    -   name: "Pak iets uit een lijst"
        explanation: "Om een item uit een lijst te krijgen gebruiken we [nummer] dus met fruit[1] krijg je de eerste fruit uit de lijst !"
        example: "Bijvoorbeeld: eerstefruit is fruit[1]"
        demo_code: |-
            fruit is ['banaan', 'appel', 'kers']
            eerstefruit is fruit[1]
            print(eerstefruit)
    -   name: "Pak een random item uit een lijst"
        explanation: "Om een random item uit een lijst te pakken, gebruiken we [random]. Dus fruit[random] is pak een random fruit uit de lijst!"
        example: "Bijvoorbeeld: randomfruit is fruit[random]"
        demo_code: |-
            fruit is ['banaan', 'appel', 'kers']
            randomfruit is fruit[random]
            print(randomfruit)
13:
    start_code: |-
        print('Hoeveel is 5+3?')
        antwoord = 5+3
        print('antwoord is nu:')
        print(antwoord)
        if antwoord == 8:
          print('Dat is goed!')
        else:
          print('Helaas dat is fout!')
    intro_text: "Nu veranderen we is in = en ==. Je gebruikt = als je iets een getal wilt maken. Als je bijvoorbeeld antwoord 8 wilt maken zeg je antwoord = 8. == gebruik je om te kijken of twee dingen hetzelfde zijn."
    commands:
    -   name: "Vergelijken"
        explanation: "Als we gaan vergelijken gebruiken we dus ==. 5+3 == 8 kijkt dus of 5+3 gelijk is aan 8"
        example: "Bijvoorbeeld: 5+3 == 8"
        demo_code: |-
            if 5+3 == 8:
                print('5+3 is inderdaad 8')
            else:
              print('Dit wordt niet geprint want 5+3 is 8!')
    -   name: "Waarde geven"
        explanation: "Als we willen zeggen dat een variabele genaamd antwoord 8 is, dan doen we antwoord = 8."
        example: "Bijvoorbeeld: antwoord = 8"
        demo_code: |-
            print('Hoeveel is 5+3?')
            antwoord = 5+3
            print('antwoord is nu:')
            print(antwoord)
    -   name: "Vergelijken en waarde geven"
        explanation: "Als we gaan vergelijken gebruiken we dus ==. Als we een waarde geven dan gebruiken we =. "
        example: "Bijvoorbeeld: antwoord == 8, antwoord = 8"
        demo_code: |-
            print('Hoeveel is 5+3?')
            antwoord = 5+3
            print('antwoord is nu:')
            print(antwoord)
            if antwoord == 8:
              print('Dat is goed!')
            else:
              print('Helaas dat is fout!')
