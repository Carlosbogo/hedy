%import common.DIGIT
%import common.NEWLINE
%import common.SIGNED_INT -> NUMBER
%import common.WS_INLINE
ID_CONTINUE: ID_START | /[\p{Mn}\p{Mc}\p{Nd}\p{Pc}Â·]+/
ID_START: /[\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nl}_]+/
NAME: ID_START ID_CONTINUE*
PUNCTUATION: _EXCLAMATION_MARK | _QUESTION_MARK | _PERIOD //uppercase places tokens in tree
_ADD: "+"
_AND: "en"
_ASK : "vraag"
_AT: "opplek"
_COLON: ":"
_COMMA: ","
_DIVIDE: "/"
_DOUBLE_EQUALS: "=="
_ECHO : "herhaal"
_ELIF: "anders"
_ELSE: "anders"
_END_BLOCK: "end-block"
_EOL: "\r"?"\n"
_EQUALS: "="
_EXCLAMATION_MARK: "!"
_FOR: "voor"
_FORWARD : "vooruit"
_HASH: "#"
_IF: "als"
_IN: "in"
_INPUT: "invoer"
_IS: "is"
_LARGER: ">"
_LARGER_EQUALS: ">="
_LEFT_BRACKET : "("
_LEFT_SQUARE_BRACKET : "["
_LENGTH: "lengte"
_MULTIPLY: "*"
_NOT_EQUALS: "!="
_OR: "of"
_PERIOD: "."
_PRINT : "drukaf"
_QUESTION_MARK: "?"
_RANGE: "bereik"
_REPEAT: "herhaal"
_RIGHT_BRACKET : ")"
_RIGHT_SQUARE_BRACKET : "]"
_SMALLER : "<"
_SMALLER_EQUALS : "<="
_SPACE: " "+
_STEP: "stap"
_SUBTRACT: "-"
_TIMES: "keer"
_TO: "tot"
_TURN: "draai"
_WHILE: "zolang"
ask: var _SPACE _IS _SPACE _ASK (_SPACE + (_SPACE | text | punctuation)*)?
assign: var _SPACE _IS _SPACE text -> assign
assign_list: var _SPACE _IS _SPACE text ((_COMMA _SPACE|_COMMA) text)+
command: print | ask | turtle | assign | assign_list | invalid_space | invalid
echo: _ECHO (_SPACE text)?
index : DIGIT+
invalid: textwithoutspaces text?
invalid_space: _SPACE text
list_access: var _SPACE _AT _SPACE (index | random) -> list_access //todo: could be merged with list_access_var?
print: _PRINT (_SPACE (_SPACE| list_access | textwithoutspaces | punctuation)*)?
program: _EOL* command (_SPACE)* (_EOL+ command (_SPACE)*)* _EOL* //lines may end on spaces and might be separated by many newlines
punctuation : PUNCTUATION -> punctuation
random : "willekeurig" //random needs to appear in the tree for further processing so does not start with _ or is uppercase
start: program
text: /([^\r\n,!?.]+)/ -> text
textwithoutspaces: /([^\r\n,!?. ]+)/ -> text //anything can be parsed except for spaces (plus: a newline and a comma for list separators)
turtle: _FORWARD (_SPACE (NUMBER | list_access | textwithoutspaces))? -> forward | _TURN (_SPACE (list_access | textwithoutspaces))? -> turn
var: NAME -> var