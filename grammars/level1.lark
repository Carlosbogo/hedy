start: program
program: _EOL* (command (_SPACE)* _EOL+)* (command (_SPACE)*)? //lines may end on spaces and might be separated by many newlines
command: print | ask | echo | turtle | invalid_space | invalid

print: _PRINT (_SPACE text)?
ask: _ASK (_SPACE text)?
echo: _ECHO (_SPACE text)?
turtle: _FORWARD (_SPACE NUMBER)? -> forward | _TURN (_SPACE text)? -> turn
invalid_space: _SPACE text
invalid: textwithoutspaces text?

_EOL: "\r"?"\n"

text: /([^\n]+)/ -> text //anything can be parsed except for a newline
textwithoutspaces: /([^\n *+-\/]+)/ -> text //anything can be parsed except for spaces (plus: a newline)

%import common.DIGIT
%import common.WS_INLINE
%import common.NEWLINE
%import common.SIGNED_INT -> NUMBER

// FH Sept 2021: More info on this variable format: https://www.unicode.org/reports/tr31/tr31-1.html
// Exact grammar stolen from: https://lark-parser.readthedocs.io/en/latest/classes.html

NAME: ID_START ID_CONTINUE*
ID_START: /[\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nl}_]+/
ID_CONTINUE: ID_START | /[\p{Mn}\p{Mc}\p{Nd}\p{Pc}Â·]+/

// Internal symbol added by the preprocess_blocks function to indicate the end of blocks
// FIXME ensure that the user can't write this token
_END_BLOCK: "end-block"
